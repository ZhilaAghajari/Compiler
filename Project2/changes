removed from FieldDeclLoop2:

			| FieldDeclLoop2 COMMAnum VariableDeclId EQUALnum VariableInitializer 
{
	/*the last possible event is the whole diagram repeating again while it continues with a comma ',' with a repeating part of FieldDecloop*/
	tree CommaOpTree = MakeTree(CommaOp,type_tree,$5);
	$$ = MakeTree(DeclOp,$1,MakeTree(CommaOp,$3,CommaOpTree));
}
			| FieldDeclLoop2 COMMAnum VariableDeclId 
{
	/*Similar to above, expect we finish with VariableDecId*/
	tree CommaOpTree = MakeTree(CommaOp,type_tree,NullExp());
	$$ = MakeTree(DeclOp,$1,MakeTree(CommaOp,$3,CommaOpTree));
		
}

------------------------------------------------

ArrayCreationExpressionLoop: ArrayCreationExpressionLoop LBRACnum Expression RBRACnum
{
	$$ = MakeTree(BoundOp,$1,$3);
}
							| LBRACnum Expression RBRACnum
{
	$$ = MakeTree(BoundOp,NullExp(),$2);	
}
;



------------------------------------------------------------
Type: INTnum
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(INTEGERTNode,$1),NullExp());
	$$ = type_tree;
}	
	| IDnum 
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(IDNode,$1),NullExp());
	$$ = type_tree;
}
	|INTnum BrackLoop
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(INTEGERTNode,$1),$2);
	$$ = type_tree;
}
	| IDnum BrackLoop
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(IDNode,$1),$2);
	$$ = type_tree;
}
	| IDnum TypeList
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(IDNode,$1),$2);
	$$ = type_tree;
}
/*	| INTnum TypeList
{
	type_tree = MakeTree(TypeIdOp,MakeLeaf(INTEGERTNode,$1),$2);
	$$ = type_tree;
}*/
;

TypeList: DOTnum Type
{
	$$ = MakeTree(FieldOp,$2,NullExp());
}
		| BrackLoop TypeList
{
	$$ = MakeTree(IndexOp,NullExp(),NullExp());
}
;